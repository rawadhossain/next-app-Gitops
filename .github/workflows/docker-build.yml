name: Continuous Deployment (Prod)
on:
    push:
        branches: ["main"]
jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Docker login
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_SECRET }}
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Build and push school image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: Dockerfile
                  push: true
                  tags: rawadhossain/todo-app:${{ github.sha }}
            - name: Clone staging-ops repo, update image tags, and push tags
              env:
                  PAT: ${{ secrets.PAT }}
              run: |
                  git clone https://github.com/rawadhossain/argocd-gitops-deployment.git
                  cd argo-deployment
                  
                  # Configure git user
                  git config user.name "GitHub Actions Bot"
                  git config user.email "actions@github.com"
                  
                  # Set up the remote URL with PAT for pushing
                  git remote set-url origin https://${PAT}@github.com/rawadhossain/argocd-gitops-deployment.git
                  
                  # Pull latest changes to avoid conflicts
                  git pull origin main
                  
                  # Update the image tag
                  sed -i 's|image: 100xdevs/todo-app-week-39:.*|image: rawadhossain/todo-app:${{ github.sha }}|' manifest.yml
                  
                  # Check if there are changes to commit
                  git status --porcelain
                  if [[ $(git status --porcelain) ]]; then
                    git add .
                    git commit -m "Update school server image tags to ${{ github.sha }}"
                    
                    # Retry push with pull in case of conflicts
                    max_retries=3
                    retry_count=0
                    
                    while [ $retry_count -lt $max_retries ]; do
                      if git push origin main; then
                        echo "Successfully pushed changes"
                        break
                      else
                        echo "Push failed, attempting to pull and retry... (attempt $((retry_count + 1)))"
                        git pull origin main --rebase
                        retry_count=$((retry_count + 1))
                        
                        if [ $retry_count -eq $max_retries ]; then
                          echo "Failed to push after $max_retries attempts"
                          exit 1
                        fi
                      fi
                    done
                  else
                    echo "No changes to commit."
                  fi
